@startuml Filter

class timeseries.FilterFactory {
    +get(name): Filter
    +register(filter)
    +list(): [str]
}
note right of timeseries.FilterFactory
  Singelton
  instance available as
  pyaro.timeseries.filters
end note

interface timeseries.Filter {
  - __init__() # unrestricted and kwargs
  --
  - name(): str
  - init_kwargs(): dict
  + args(): dict
  + __rep__(): str
   filter_data(data, stations, variables): Data
   filter_stations(stations): dict[str, Station]
   filter_variables(variables): [str]

}

class timeseries.VariableNameFilter {
  + __init__(reader_to_new, include, exclude): VariableNameChangingFilter
  + name(): "variables"
  + init_kwargs(): dict
  + filter_variables(variables): [str]
  + filter_data(data, stations, variables): Data
    new_varname(reader_varname): str
    reader_varname(new_varname): str
    has_variable(new_varname): bool
    has_reader_variable(reader_varname): bool
}

abstract class timeseries.DataIndexFilter {
  + filter_data(data, stations, variables): Data
  - filter_data_idx(data, stations, variables): idx
}


abstract class timeseries.StationReductionFilter {
  + filter_data_idx(data, stations, variables): Data
  - filter_stations(stations): dict[str, Station]
}

class timeseries.StationFilter {
  + __init__(include=[station], exclude=[station]): StationFilter
  + name(): "stations"
  + init_kwargs(): dict
  + filter_stations(stations): dict[str, Station]
  has_station(station): bool
}

class timeseries.CountryFilter {
  + __init__(include=[country], exclude=[country]): CountryFilter
  + name(): "countries"
  + init_kwargs(): dict
  + filter_stations(stations): dict[str, Station]
  has_country(iso2_str): bool
}

class timeseries.BoundingBoxFilter {
  + __init__(include=[country], exclude=[country]): CountryFilter
  + name(): "bounding_boxes"
  + init_kwargs(): dict
  + filter_stations(stations): dict[str, Station]
  has_location(lat, lon): bool
}

class timeseries.TimeBoundsFilter {
  + __init__(start_include=[flag], start_exclude=[flag],\n start_end_include, startend_exclude,\n end_include, end_exclude): FlagFilter
  + name(): "time_bounds"
  + init_kwargs(): dict
  + filter_data_idx(data, stations, variables): Data
  has_envelope(): bool
  envelope(): (start, end)
  contains(start_dt_array, end_dt_array): bool-array
}


class timeseries.FlagFilter {
  + __init__(include=[flag], exclude=[flag]): FlagFilter
  + name(): "flags"
  + init_kwargs(): dict
  + filter_data_idx(data, stations, variables): Data
  usable_flags(): set(flags)
}


timeseries.Filter <|.. timeseries.VariableNameFilter
timeseries.Filter <|.. timeseries.DataIndexFilter
timeseries.DataIndexFilter <|.. timeseries.StationReductionFilter
timeseries.StationReductionFilter <|.. timeseries.StationFilter
timeseries.StationReductionFilter <|.. timeseries.CountryFilter
timeseries.StationReductionFilter <|.. timeseries.BoundingBoxFilter
timeseries.DataIndexFilter <|.. timeseries.TimeBoundsFilter
timeseries.DataIndexFilter <|.. timeseries.FlagFilter

timeseries.FilterFactory ..> timeseries.VariableNameFilter
timeseries.FilterFactory ..> timeseries.StationFilter
timeseries.FilterFactory ..> timeseries.CountryFilter
timeseries.FilterFactory ..> timeseries.BoundingBoxFilter
timeseries.FilterFactory ..> timeseries.TimeBoundsFilter
timeseries.FilterFactory ..> timeseries.FlagFilter
